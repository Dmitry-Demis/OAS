name: FastAPI Music Catalog API CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to set up Python environment and run tests
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run tests
      - name: Run tests
        run: |
          pytest tests/ --maxfail=1 --disable-warnings -q

  # Job to build Docker image
  build_docker_image:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: |
          docker build -t myusername/my-music-catalog-api:latest .

  # Job to deploy application
  deploy_to_production:
    needs: build_docker_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push myusername/my-music-catalog-api:latest

      - name: Deploy to Production (via SSH or Kubernetes)
        run: |
          ssh -o StrictHostKeyChecking=no user@your-server "docker pull myusername/my-music-catalog-api:latest && docker-compose up -d"

  # Job to monitor metrics using Prometheus
  monitor_metrics:
    needs: deploy_to_production
    runs-on: ubuntu-latest
    steps:
      - name: Wait for the app to be up
        run: sleep 30 # wait for the app to initialize

      - name: Check if Prometheus is scraping metrics
        run: |
          curl -s http://localhost:8080/metrics | grep -q "http_total_requests_total"
          echo "Prometheus metrics are being scraped."
